=============================================================================
Boolean notes:

Reports True in a test:
---------------------------------------------------------------------
True
1
9999
-1
-9999
"some_string"
{None}
{'field'}
{'field': None}
[None]
(None,)
(None, None)

Reports False in a test:
---------------------------------------------------------------------
None
False
0
""
{}
[]
()
(<TEST>)    # where <TEST> is any other check that fails e.g. (None)


if statements:
-----------------------
if <CHECK>:
    <TRUE_BODY>
else:
    <FALSE_BODY>
.
One line conditional assignment:
var = <TRUE_VALUE> if <CHECK> else <FALSE_VALUE>

========================================================================================================
Variable types:
examples
int_a  = 123                          # integer
str_a  = "string"                     # string
bool_a = True                         # boolean
dict_a = {"a":"A", "b":"B", "c":"B"}  # dictionary
list_a = ["a", "b", "c"]              # list
set_a  = {"a", "b", "c"}              # set

========================================================================================================
built in functions
----------------------------------------------------------------------------------------
all(<ITERABLE>)                       # True if all items in an iterable are true, otherwise it returns False
any(<ITERABLE>)                       # True if any item in an iterable are true, otherwise it returns False
print(<STR>)                          # output <STR> plus a newline to standard out
range(start, stop, step)              # generator of integers from start (included) to stop (not included)
str(<OBJECT>)                         # convert <OBJECT> to a string
type(<VAR>)                           # gives the type object of <VAR>

========================================================================================================
Standard Library functions
----------------------------------------------------------------------------------------
import os
os.getcwd()            # get the current working directory
os.listdir()           # list the contents of a directory
os.remove()            # remove a file

========================================================================================================
logging
----------------------------------------------------------------------------------------
logging.basicConfig(format=... ) options:
%(levelname)s       # the severity level
%(levelno)s         # Numeric logging level for the message (DEBUG, INFO, WARN, ERROR, CRITICAL)
%(asctime)s         # time like this: 2021-06-04 18:46:42,241
%(msecs)03d         # the 3 digits for milliseconds
%(threadName)s      # e.g. MainThread
%(name)s            # the name of the file
%(message)s         # message given to the Logger object
full list: https://www.python.org/dev/peps/pep-0282/#formatters

========================================================================================================
pytest
----------------------------------------------------------------------------------------
modules
------------
pytest                 # default
pytest-cov             # gives coverage options

CLI:
------------
pytest                 # run all tests in a given folder recursively to all child folders
pytest -k <TEST_NAME>  # run only the test with the name <TEST_NAME>

@pytest.mark.skip(reason="because")                  # decorator to skip a test
@pytest.mark.skipif(<CONDITION>,reason="because")    # decorator to skip a test on a condition

mock
@patch("path.of.object.to.mock")                     # decorator to mock an object

========================================================================================================
virtual environments:
----------------------------------------------------------------------------------------
pip install virtualenv                 # install virtual envrionment package

Steps (e.g.):
---------------------------------------------------------------------------------------
mkdir /c/work/pyenv               # Create a folder to store the environments in
cd /c/work/pyenv                  # cd to the created folder
python -m venv env                # this will create the director "env", change it to a different name if desired
cd ./env/Scripts                  # This is the windows location. Linux might be ./env/bin
source activate                   # now you are running in the virtual env
deactivate                        # this will return you back to the normal OS environment


===================================================================================================
packages
---------------------------------------------------------------------------------------
python setup.py bdist_wheel       # create a wheel package from a setup.py file (need "wheel" package installd)
pytnon setup.py sdist             # create a .gz package from a setup.py file (note: sdist & bdist_wheel can both be parameters)

common package commands:
----------------------------------------------------------------------------------------------------------
python -m pip install --upgrade pip setuptools wheel            # initial setup
python -m pip install git+https://github.com/python/mypy        # e.g. package install from a git URL that has a setup.py file

pip commands
---------------------------------------------------------------------------
pip list --outdated                           # check for outdated modules
pip install --upgrade <MODULE>                # update a module


===================================================================================================
One line file share servers
----------------------------
Python 2:
python -m SimpleHTTPServer

Python 3:
python -m http.server
