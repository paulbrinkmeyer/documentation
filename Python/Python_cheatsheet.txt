Installing multiple versions in Ubuntu:
===============================================================================
sudo add-apt-repository ppa:deadsnakes/ppa
sudo apt update
sudo apt install python3.6
sudo apt install python3.7
sudo apt install python3.8
sudo apt install python3.9
sudo apt install python3.10
sudo apt install python3.11
sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1
sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 2
sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 3
sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 4
sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 5
sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 6
sudo update-alternatives --config python3    # this will let you pick the default
sudo apt-get install python3.6-distutils
sudo apt-get install python3.7-distutils
sudo apt-get install python3.8-distutils
sudo apt-get install python3.9-distutils
sudo apt-get install python3.10-distutils
sudo apt-get install python3.11-distutils
sudo update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

# solved an issue with apt_pkg not loading:
https://stackoverflow.com/questions/13708180/python-dev-installation-error-importerror-no-module-named-apt-pkg

===============================================================================
Boolean notes:

Reports True in a bool test.
i.e. what would be returned from bool(<VAR>) or an if <VAR> statement
-------------------------------------------------------------------------------
True
1
9999
-1
-9999
"some_string"
{None}
{'field'}
{'field': None}
[None]
(None,)
(None, None)

Reports False in a bool test:
-------------------------------------------------------------------------------
None
False
0
""
{}
[]
()
(<TEST>)    # where <TEST> is any other check that fails e.g. (None)


===============================================================================
if statements:
-----------------------
if <CHECK1>:
    <TRUE_BODY>
elif <CHECK2>:
    # code to run if <CHECK1> is False and <CHECK2> is True
else:
    <FALSE_BODY>

One line conditional assignment:
--------------------------------
var = <TRUE_VALUE> if <CHECK> else <FALSE_VALUE>

===============================================================================
try block:
---------------------------
try:
    # code to try and run
except:
    # code to run on error
else:
    # code to run when no error occurs
finally:
    # code that will always run (error or not)
# code passed this point will not run if there was an error that wasn't excepted

catch all try block e.g.:
-------------------------
try:
    ...
except Exception as e:
    ...
    raise e

===============================================================================
Standard variable types:
examples
int_a = 123                           # integer
float_a = 123.456                     # float
str_a = "string"                      # string
bool_a = True                         # boolean
tuple_a = ("a", "b", "c")             # tuple: note, it must have at least one common e.g. (1,)
dict_a = {"a":"A", "b":"B", "c":"B"}  # dictionary
list_a = ["a", "b", "c"]              # list
set_a  = {"a", "b", "c"}              # set


Check for type, will return a boolean: e.g.
-------------------------------------------
type(VAR) is None
type(VAR) is int
type(VAR) is str
type(VAR) is float
type(VAR) is bool
type(VAR) is tuple
type(VAR) is dict
type(VAR) is list
type(VAR) is set

===============================================================================
String slicing
-------------------------------------------------------------------------------
var = "abc123"
...
var[0]       -> "a"     # get first value
var[3]       -> "1"     # get 4th value
var[:3]      -> "abc"   # get first 3 values
var[0:3]     -> "abc"   # same as var[:3] but more explicit
var[3:]      -> "123"   # get last 3 values
var[1:3]     -> "bc"    # get 2nd to 3rd values
var[-1]      -> "3"     # get last value
var[-4]      -> "c"     # get 4th to last value
var[-2:]     -> "23"    # get last 2 values
...

-------------------------------------------------------------------------------
String percent replacement per printf in C:
link: https://www.tutorialspoint.com/c_standard_library/c_function_printf.htm
-------------------------------------------------------------------------------
format: %[flags][width][.precision][length]specifier
specifier:
c           Character
d or i      Signed decimal integer
e           Scientific notation (mantissa/exponent) using e character
E           Scientific notation (mantissa/exponent) using E character
f           Decimal floating point
g           Uses the shorter of %e or %f
G           Uses the shorter of %E or %f
o           Signed octal
s           String of characters
u           Unsigned decimal integer
x           Unsigned hexadecimal integer
X           Unsigned hexadecimal integer (capital letters)
p           Pointer address
n           Nothing printed
%           % Character

flags:
-           Left-justify within the given field width; Right justification is the default (see width sub-specifier).
+           Forces to precede the result with a plus or minus sign (+ or -) even for positive numbers. By default, only negative numbers are preceded with a -ve sign.
(space)     If no sign is going to be written, a blank space is inserted before the value.
#           Used with o, x or X specifiers the value is preceded with 0, 0x or 0X respectively for values different than zero. Used with e, E and f, it forces the written output to contain a decimal point even if no digits would follow. By default, if no digits follow, no decimal point is written. Used with g or G the result is the same as with e or E but trailing zeros are not removed.
0           Left-pads the number with zeroes (0) instead of spaces, where padding is specified (see width sub-specifier).

width:
(number)    Minimum number of characters to be printed. If the value to be printed is shorter than this number, the result is padded with blank spaces. The value is not truncated even if the result is larger.
*           The width is not specified in the format string, but as an additional integer value argument preceding the argument that has to be formatted.

precision:
.number    For integer specifiers (d, i, o, u, x, X) − precision specifies the minimum number of digits to be written. If the value to be written is shorter than this number, the result is padded with leading zeros. The value is not truncated even if the result is longer. A precision of 0 means that no character is written for the value 0. For e, E and f specifiers − this is the number of digits to be printed after the decimal point. For g and G specifiers − This is the maximum number of significant digits to be printed. For s − this is the maximum number of characters to be printed. By default all characters are printed until the ending null character is encountered. For c type − it has no effect. When no precision is specified, the default is 1. If the period is specified without an explicit value for precision, 0 is assumed.
.*         The precision is not specified in the format string, but as an additional integer value argument preceding the argument that has to be formatted.

length:
h          The argument is interpreted as a short int or unsigned short int (only applies to integer specifiers: i, d, o, u, x and X).
l          The argument is interpreted as a long int or unsigned long int for integer specifiers (i, d, o, u, x and X), and as a wide character or wide character string for specifiers c and s.
L          The argument is interpreted as a long double (only applies to floating point specifiers: e, E, f, g and G).

-------------------------------------------------------------------------------
String replacement methods multiple options:
-------------------------------------------------------------------------------
 * name = "Paul"; print("my name is " + name)       ->   my name is Paul
 * name = "Paul"; print(f"my name is {name}")       ->   my name is Paul
 * print("my name is {name}".format(name="Paul"))   ->   my name is Paul

-------------------------------------------------------------------------------
Special strings
-------------------------------------------------------------------------------
"string"     -> normal string that will interpret escape characters used after "\"
b"string"    -> a byte string
f"string"    -> see "String replacement methods multiple options" above
r"string"    -> raw string without escape characters and can't end in an odd number of '\'

===============================================================================
Dictionary operations
-------------------------------------------------------------------------------
d1 = {"1": "one"}                                # This is the starting value for the following examples
d2 = {"2": "two }                                # This is the starting value for the following examples
d3 = d1 | d2   ->   {"1": "one", "2": "two"}     # The output is a new dictionary. d1 & d2 are not changed. On a collision d2's values will take persistence. Requires Python version >= 3.9.
d4 = {1: "one", 2: "two"}
key_value = d1.pop("1")   ->   "one"
d1.pop("no_key")   ->   KeyError: "no_key"
d1.pop("no_key", None)   ->   None               # Safe way to remove a key out of a dictionary
list(d4.keys())   ->   [1, 2]                    # list all the keys

========================================================================================================
function definition examples:
----------------------------
# simple form
def function_name():
    pass

# with parameters and a return value
def function_name(param1, param2="default_value"):
    return True

# optional annotations. They have no effect other than documentation of the parameters and return types.
def function_name(param1: int) -> str:
    return str(param1k)

========================================================================================================
class definition examples:
----------------------------
class ClassName():
    def method(self):
        pass

    @staticmethod
    def static_method():
        pass

    @classmethod
    def class_method(cls):
        pass


========================================================================================================
built in functions
-------------------------------------------------------------------------------
all(<ITERABLE>)                       # True if all items in an iterable are true, otherwise it returns False
any(<ITERABLE>)                       # True if any item in an iterable are true, otherwise it returns False

hex(<INT>)                            # convert an integer to a hexadecimal string
hex(255)                              # "0xff"
hex(255)[2:]                          # "ff"  # remove the "0x" prefix

isinstance(<VAR>, <TYPE>)             # Check if <VAR> is of type <TYPE> e.g. isinstance("hi", str)

int(value, base=10)                   # convert value to an integer. base is optional and defaults to 10
int(3.5)                              # 3
int(3)                                # 3
int("3")                              # 3
int("12")                             # 12
int("12", 16)                         # 18
int("ff", 16)                         # 255
int("FF", 16)                         # 255
int("0xff", 16)                       # 255
int("1010", 2)                        # 10
int("z", 16)                          # ValueError: invalid literal for int() with base 16: 'z'

print(<STR>)                          # output <STR> plus a newline to standard out
range(start, stop, step)              # generator of integers from start (included) to stop (not included)
str(<OBJECT>)                         # convert <OBJECT> to a string
type(<VAR>)                           # gives the type object of <VAR>

hasattr(<OBJECT>,<FIELD>)             # check if an object has a field with the name of <FIELD>. It's safer than guessing that object.field exists.
getattr(<OBJECT>,<FIELD>[,<DEFAULT>]) # useful for getting an objects field value using the <FIELD> string to reference it
setattr(<OBJECT>,<FIELD>,<VALUE>)     # useful for setting an objects field value using the <FIELD> string to reference it

===============================================================================
Standard Library functions
-------------------------------------------------------------------------------
import os
os.getcwd()            # get the current working directory
os.listdir()           # list the contents of a directory
os.remove()            # remove a file

===============================================================================
logging
----------------------------------------------------------------------------------------
logging.basicConfig(format=... ) options:
%(levelname)s       # the severity level
%(levelno)s         # Numeric logging level for the message (DEBUG, INFO, WARN, ERROR, CRITICAL)
%(asctime)s         # time like this: 2021-06-04 18:46:42,241
%(msecs)03d         # the 3 digits for milliseconds
%(threadName)s      # e.g. MainThread
%(name)s            # the name of the file
%(message)s         # message given to the Logger object
full list: https://www.python.org/dev/peps/pep-0282/#formatters

===============================================================================
pytest
-------------------------------------------------------------------------------
modules
------------
pytest                        # default
pytest-cov                    # gives coverage options. Note when coverage is used with Pycharm debugging is affected: https://stackoverflow.com/questions/40718760/unable-to-debug-in-pycharm-with-pytest
pytest-mock                   # used to get the mocker fixture

CLI (standard):
------------
pytest                            # run all tests in a given folder recursively to all child folders
pytest --help                     # is very helpful at explaining possible options
pytest <FILE_1> ... <FILE_N>      # only run the tests in the given files
pytest --ignore=<FILE>            # don't consider <FILE> for a source of tests to run
pytest -m <MARKER_EXPRESSION>     # run only the tests that match the <MARKER_EXPRESSION> e.g. -m 'mark1 and not mark2'
pytest --markers                  # list all the registered markers. To register a marker add it to the markers in the pytest.ini file
pytest -k <TEST_NAME_SUB_STRING>  # run only the tests that have <TEST_NAME_SUB_STRING> in its name
pytest --durations=0              # Show all times for tests, setup and teardown
pytest --durations=1              # show the slowest test, setup or teardown
pytest --durations=10             # show the slowest 10 tests, setups or teardowns
pytest -s                         # shows all standard output
pytest -v                         # prints every test name and result, one per line
pytest -vv                        # will reveal the real fast durations that made it to the "--durations=<#>" list, where <#> is an integer value; acts like "-v" is turned on too

CLI (with coverage)
--------------------------------------
pytest --cov                            # show coverage report on all possible sources
pytest --cov=<SRC>                      # show coverage report only on <SRC>. Provide this option again for more than one source
pytest --cov --cov-report=term-missing  # show coverage report and the exact missing line numbers

pytest.ini                              # defines how the pytest command will work
--------------------------------------
[pytest]                                # header that needs to exist
log_cli = <BOOL>                        # <BOOL>=false default, <BOOL>=true will output logging records as they are emitted directly into the console and acts like "-v" is turned on too
adopts =                                # the start of pytest CLI arguments
 --cov                                  # e.g. CLI argument to always use that follows the "adopts =" line

Useful test tools:
----------------------------------------------------
@pytest.fixture()                                    # decorator to create a fixture
@pytest.mark.skip(reason="because")                  # decorator to skip a test
@pytest.mark.skipif(<CONDITION>,reason="because")    # decorator to skip a test on a condition
@pytest.mark.<MARKER>                                # decorator to mark a test with the given <MARKER>
with pytest.raises(<ERRORS>, match=<REGX>):          # check for an error in the code block to follow; <ERRORS> errors to expect e.g. (ValueError, TypeError); <REGX> is a regular expression that matches the raised message

mock common usage
-------------------
@patch("path.of.object.to.mock" autospec=True)        # decorator to mock an object
mocker.patch("path.of.object.to.mock", autospec=True) # pytest-mock mocker usage
mock_something.call_args                              # a tuple in the form (args, kwargs) e.g. ([1,2,3], {"kwarg1": 1, "kwarg2": 2})
mock_something.call_args.args                         # the positional args e.g. [param1, param2, param3]
mock_something.call_args.kwargs                       # the key word args e.g. {"kwarg1": 1, "kwarg2": 2}
mock_something.call_count                             # the number of times the mocked object was called
mock_something.return_value = ...                     # set a specific return value for the mocked object
mock_something.assert_called_once_with(...)           # validate that the mocked object is called once with specific parameters
mock_something.assert_has_calls([...])                # validate that the mocked object is called with all the list of calls

mocking chained function calls: https://stackoverflow.com/questions/34308511/python-mocking-chained-function-calls

Mock vs MagicMock
---------------------
A magic method is a method that starts and ends with "__". MagicMock lets you mock those in the same way as normal methods.

Common Mock Methods:
---------------------
class TestSomething:
    def setup_method(self):
        try:
            self.sleep = patch("path.to.target.time.sleep", autospec=True).start()
            self.print = patch("builtins.print", autospec=True).start()
        except Exception as e:
            patch.stopall()
            raise e

    def teardown_method(self):
        patch.stopall()

    def test_something(self):
        # ...
        assert self.sleep.call_count == 1
        self.print.assert_called_once_with("Hello World")


===============================================================================
virtual environments:
-------------------------------------------------------------------------------
sudo apt-get install python3.10-dev python3.10-venv    # If running in Ubuntu
pip install virtualenv                                 # install virtual environment package

Steps (e.g.):
-------------------------------------------------------------------------------
mkdir /c/work/pyenv               # Create a folder to store the environments in
python -m venv env                # this will create the director "env", change it to a different name if desired
cd ./env/Scripts                  # This is the windows location. Linux might be ./env/bin
source activate                   # now you are running in the virtual env
deactivate                        # this will return you back to the normal OS environment


===============================================================================
packages
-------------------------------------------------------------------------------
python setup.py bdist_wheel       # create a wheel package from a setup.py file (need "wheel" package installed)
pytnon setup.py sdist             # create a .gz package from a setup.py file (note: sdist & bdist_wheel can both be parameters)

useful resource: https://godatadriven.com/blog/a-practical-guide-to-using-setup-py/

could be useful to add SHA to the version:
---------------------------------------
import git   # requires "gitpython" packege
repo = git.Repo(search_parent_directories=True)
sha = repo.head.object.hexsha

common package commands:
-------------------------------------------------------------------------------
python -m pip install --upgrade pip setuptools wheel            # initial setup
python -m pip install git+https://github.com/python/mypy        # e.g. package install from a git URL that has a setup.py file

pip common commands
---------------------------------------------------------------------------
pip list --outdated                           # check for outdated modules
pip install --upgrade <MODULE>                # update a module
pip install <MODULE><OP><VERSION>             # install a specific version. e.g. <OP>s == (exactly equal) ~= (
pip install -e .                              # install from local repo in editable mode. You can make changes to the module and it will auto install the changes
pip uninstall <MODULE>                        # uninstall a module
pip install -r <FILE>                         # install a list of requirements from file. Each line has a module with an optional version (e.g. <MODULE>==<VERSION>)
pip freeze > <FILE>                           # create a requirements file from the currently installed modules


===============================================================================
One line file share servers
----------------------------
Python 2:
python -m SimpleHTTPServer

Python 3:
python -m http.server <port>                 # <port> to use. if left out default of 8000 will be used
