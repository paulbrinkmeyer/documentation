Parameter commands
-----------------------------------------
$#              <- returns the number of parameters
$@              <- returns all the parameters to the script if not in a function. Otherwise, it gives all the function parameters
$0              <- returns the script name even if in a function
$1              <- returns the first parameter to the script if not in a function. Otherwise, it gives the first parameter to the function.
$2              <- returns the second parameter to the script if not in a function. Otherwise, it gives the first parameter to the function.
$3              <- returns the third parameter ...
${FUNCNAME[0]}  <- returns the current function's name
--              <- signify the end of command options, after which only positional parameters are accepted
-               <- conventionally used to specify that a program should handle data coming from the standard input or send data to the standard output


Other non-obvious commands
--------------------------------------------------------------------------------------------------
$$                 <- is the id of the current process
$?                 <- return code of the previous command
!!                 <- execute the previous command again
!$                 <- returns the last parameter of the previous command
!^                 <- returns the first parameter of the previous command
!:<NUM>            <- returns the <NUM>th parameter of the previous command
!*                 <- returns all the parameters of the previous command
!<NUM>             <- execute the <NUM> command in the history list
!<TEXT>            <- execute the command that most recently begins with <TEXT> from the history list
!<CMD>:*           <- returns all the parameters of the command that is returned by !<CMD>
!<CMD>:<NUM>       <- returns the <NUM>th parameter of the command that is returned by !<CMD>
!<CMD>:p           <- show the output that will be used for the !<CMD>
^<FIND>^<REPLACE>  <- rerun the previous command by replacing <FIND> with <REPLACE>


Wildcard expansion
---------------------------------------------------
*           <- matches any string
?           <- matches any one character
{this,that} <- will match either "this" or "that"


variables
--------------------------------
VAR=1               # assignment
VAR='with spaces'   # assignment with spaces
$VAR                # will return the variable's value
${VAR}              # will return the variable's value and not consider any further characters past the "}" as part of it's name
${VAR:-DEFAULT}     # same as ${VAR} but if not set then it will take the DEFAULT value
${VAR:+OVERRIDE}    # same as ${VAR} but if set it will take the OVRRIDE value
${#VAR}             # will return the length of VAR


variables - get sub-strings
--------------------------------
VAR=123456789       # the following examples assume VAR has been set to this
${VAR:0:5}          # 12345
${VAR:3}            # 456789
${VAR:3:2}          # 45
${VAR:(-4)}         # 6789


function operations:
--------------------------------
declare -F              <- list all Function names
type functionName       <- Output the definition of a function
unset -f functionName   <- remove a function


function definition examples:
--------------------------------
function functionName(){
    echo "Body of function"
}
# OR
function functionName(){ echo "Body of function"; }
# OR
functionName()
{
    echo "Body of function"
}


If statement structure examples:
--------------------------------
if <test>; then
    <body>
elif
    <body>
else
    <body>
fi

if <test>; then <body>; fi


case examples:
-------------------------------
case "$OSTYPE" in
    solaris*) echo "SOLARIS"          ;;
    darwin*)  echo "OSX"              ;; 
    linux*)   echo "LINUX"            ;;
    bsd*)     echo "BSD"              ;;
    msys*)    echo "WINDOWS"          ;;
    *)        echo "unknown: $OSTYPE" ;;
esac


while loop example:
---------------------
while true; do
    date
    sleep 1
done

# one line format:
while true; do date; sleep 1; done


# getopts example:
----------------------------------------------------------------------------------------------------------
while getopts ":ht:" opt; do          # the first ":" tells it not to use the default usage error messages
                                      # the second ":" indicates that the "t" option stores a value
    case ${opt} in
    a )                               # process option a
        ;;
    t ) T_VALUE=${OPTARG}             # process option t, ${OPTARG} holds its value
        ;;
    \? ) echo "Usage: cmd [-a] [-t]"  # example way to handle usage errors
        ;;
    esac
done
shift $((OPTIND - 1))                 # This is good practice to shift off already parsed parameters


getopts example again without comments
----------------------------------------
while getopts ":ht:" opt; do
    case ${opt} in
    a ) # process option a
        ;;
    t ) T_VALUE=${OPTARG}
        ;;
    \? ) echo "Usage: cmd [-a] [-t]"
        ;;
    esac
done
shift $((OPTIND - 1))


For loop structure examples:
-----------------------------
for <test>; do
   <body>
done

NUM=100
for (( i=0 ; i<NUM ; i++)); do
    <body>
done


Boolean notes:
--------------------------------
reports true in a test:
true
"1"
"0"

reports false in a test:
false
""

Test option examples:
----------------------
Integer comparison
-eq    <- if [ "$a" -eq "$b" ]
-ne    <- if [ "$a" -ne "$b" ]
-gt    <- if [ "$a" -gt "$b" ]
-ge    <- if [ "$a" -ge "$b" ]
-lt    <- if [ "$a" -lt "$b" ]
-le    <- if [ "$a" -le "$b" ]

String comparison
 =     <- is equal to        : if [ "$a" = "$b" ]   *** Note the white space framing the = ***
==     <- is equal to        : if [ "$a" == "$b" ]  *** Almost the same as = . However, there are differences***
!=     <- is not equal to    : if [ "$a" != "$b" ]
 <     <- is less than, in ASCII alphabetical order    : [ "$a" \> "$b" ]
 >     <- is greater than, in ASCII alphabetical order : [ "$a" \< "$b" ]
-n     <- is not null : if [ -n "$line" ]
-z     <- is null, that is, has zero length 

File operations (source: http://tldp.org/LDP/abs/html/fto.html)
-a     <- same as "-e" but is deprecated
-e     <- file exists     : if [ -e "$fileName" ]
-f     <- file is a regular file (not a directory or device file)
-s     <- file is not zero size
-d     <- file is a directory
-b     <- file is a block device
-c     <- file is a character device
-p     <- file is a pipe
-h     <- file is a symbolic link
-L     <- file is a symbolic link
-S     <- file is a socket
-t     <- file (descriptor) is associated with a terminal device. This test option may be used to check whether the stdin [ -t 0 ] or stdout [ -t 1 ] in a given script is a terminal.
-r     <- file has read permission (for the user running the test)
-w     <- file has write permission (for the user running the test)
-x     <- file has execute permission (for the user running the test)
-g     <- set-group-id (sgid) flag set on file or directory 
-u     <- set-user-id (suid) flag set on file
-k     <- sticky bit set
-O     <- you are owner of file
-G     <- group-id of file same as yours
-N     <- file modified since it was last read
f1 -nt f2    <- file f1 is newer than f2
f1 -ot f2    <- file f1 is older than f2
f1 -ef f2    <- files f1 and f2 are hard links to the same file


logical operators
----------------------
!      <- logical not
&&     <- short circut logical and : [ $var -ge "1" ] && [ $var -le "100" ]   #i.e. $var is in the range of 1-100
||     <- short circut logical or  : [ -z $var ] || 

string special characters
----------------------------
Need to pre fix with $' and post fix with a ' . e.g.: $'lineOne\nLineTwo'
    \a     alert (bell)
    \b     backspace
    \e
    \E     an escape character
    \f     form feed
    \n     new line
    \r     carriage return
    \t     horizontal tab
    \v     vertical tab
    \\     backslash
    \'     single quote
    \"     double quote
    \nnn   the eight-bit character whose value is  the  octal  value
         nnn (one to three digits)
    \xHH   the  eight-bit  character  whose value is the hexadecimal
         value HH (one or two hex digits)
    \cx    a control-x character


Read a file line by line (even if the last line doesn't end with a return):
--------------------------------------------------------------------------
while read line || [ -n "$line" ]; do
  #do what you want to $line
done < filename


Useful tricks
--------------------------------------------------------------------------
alias ll='ls -al'             <- common alias
$(command)                    <- returns the value of a terminal command
$'\n'                         <- will print a new line
"$VAR string to print"        <- will put the value of VAR in the string
array=(one two three)         <- will make an array of 3 values
TEMP=/tmp/file.$$.$RANDOM     <- safer temporary file

command &> fileName           <- outputs standard out and stardard error to file

sed 's/oldString/newString/g' <- replace oldString with newString
    
