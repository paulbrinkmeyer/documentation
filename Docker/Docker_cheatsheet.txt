dockerfiles notes:
---------------------------------------------------------------------------------------------------------------------
# escape=`                          # common windows directive to escape on ` instead of \
FROM <IMAGE>                        # <IMAGE> to load from, must be the first instruction after any directives or ARG
ONBUILD                             # Intructions to follow the next buildss FROM statement
ENV <VARIABLE> <VALUE>              # set an environment variable named <VARIABLE> to the value <VALUE>
WORKDIR <DIR>                       # set the working directory to <DIR>
#
RUN                                 # runs the command and commits it to the image
CMD                                 # default command to run or default arguments to give to ENTRYPOINT (if ENTRYPOINT is definded)
ENTRYPOINT                          # defines the command that will be ran when the container starts. The CMD commands are additional parameters
#
LABEL                               # 
ADD                                 # almost the same as COPY but can add URL files and compressed files too
COPY                                # copy files from bulid dir to image dir
USER                                # defines the user for follow on RUN, CMD & ENTRYPOINT instructions
#
EXPOSE                              # documentation to the runner about what ports to publish e.g. (EXPOSE 80/tcp)
VOLUME                              # define the mount point in the image. later when ran it will need to be mapped to a host
ARG                                 # a way for the builder to pass parameters to the dockfile via the "docker build --build-arg"... command
                                    # - NOTE! - It has different meaning when used before and after the FROM statement!


# building image commands:
#---------------------------------------------------------------------------------------------------------------------
docker build -t <IMAGE_NAME> .              # create a image from a Dockerfile with the name <IMAGE_NAME>
docker build -t test .                      # e.g.


# image commands
#---------------------------------------------------------------------------------------------------------------------
docker images                            # list all images
docker image rm <IMAGE>                  # remove <IMAGE>
docker image prune                       # removes all dangling images... the <none>:<none> ones
docker image history                     # summary of the commands to send to create the image
docker image save -o <TAR_IMAGE> <IMAGE> # save <IMAGE> to a <TAR_IMAGE> file
docker image tag <IMAGE> <TAG>           # tag an <IMAGE> with the given <TAG>
docker commit <CONTAINER> <IMAGE>        # creates the <IMAGE> from a <CONTAINER>


# container commmands
#---------------------------------------------------------------------------------------------------------------------
docker ps                                               # shorthand for "docker container ls"
docker container ls                                     # list all containers that are running
docker container ls -a                                  # list all containers stopped and running
docker container ls -s                                  # list the size of all running containers
docker container rm <CONTAINER>                         # remove <CONTAINER>
docker container prune                                  # remove all stopped containers
docker container rename <CURRNET_NAME_OR_ID> <NEW_NAME> # rename containter to <NEW_NAME>
docker container cp <SRC> <DST>                         # copy files to and from a container. <SRC>/<DST> will have the format of <CONTAINER_NAME>:<PATH> when referring to a container
docker container start -i CONTAINER_NAME                # start a container in intractive mode
docker top <CONTAINER>                                  # 


# run commands
#---------------------------------------------------------------------------------------------------------------------
docker run -it <IMAGE_NAME>                           # create and start a container
docker run --rm <IMAGE_NAME>                          # Automatically remove the container when it exits
docker run --name <CONTAINER_NAME> <IMAGE_NAME>       # Method to name a container
docker run --entrypoint <CMD> <IMAGE_NAME> <CMD_PARM> # Override the images ENTRYPOINT with <CMD> instead using the parameters <CMD_PARM>
docker run -d <IMAGE_NAME>                            # run the container detached (use "docker attach" to re-attach)
docker run -v <SRC>:<DEST>:<OPT> <IMAGE_NAME>         # shortcut way to --mount, will guess at the type
docker run --mount type:<TYPE>,src:<SRC>,dst:<DST>    # explicit way of doing "-v", default <TYPE> is volume
docker run -p <HOST_PORT>:<CONTAINER_PORT>            # expose and map the <CONTAINER_PORT> to the <HOST_PORT>

# volume commands
#---------------------------------------------------------------------------------------------------------------------
docker volume ls                                # list volumes
docker volume create <VOLUME>                   # create <VOLUME>
docker volume rm <VOLUME>                       # remove <VOLUME> 

# network commands
#---------------------------------------------------------------------------------------------------------------------
# "bridge" is the default network name if one is not given
docker network create <NETWORK>                 # Create a user-defined bridged network
docker network rm <NETWORK>                     # Remove a user-defined bridged network
docker network connect <NETWORK> <CONTAINER>    # Connect a running containter to a user-defined bridged network
docker network disconnect <NETWORK> <CONTAINER> # Disconnect a running containter to a user-defined bridged network
docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' <RUNNING_CONTAINER>    # get IP address of container



# other commands
#---------------------------------------------------------------------------------------------------------------------
docker inspect <RESOURCE>                       # inspect <RESOURCE>. It can be a container, volume, ...
docker exec -it <CONTAINER_NAME> <EXE>          # CLI for the <EXE> inside of <CONTAINER_NAME> e.g. docker exec -it <CONTAINER_NAME> bash
e.g.
docker exec -it test-container bash



docker service                                  # ????



# quick method to get a basic linux environment up and running.
#---------------------------------------------------------------------------------------------------------------------
docker pull alpine
docker run -it alpine                          

# git bash needs this command prefixed when running "docker run -it"
winpty




docker container run -it IMAGE_NAME           # same as: docker run -it <IMAGE_NAME>




docker attach CONTAINER_NAME                  # will attach the command line back to the container
# exit a container intractive mode without stopping the container: CTRL+P followed by CTRL+Q
