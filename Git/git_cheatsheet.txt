Command to create ssh keys. It will create an id_rsa and id_rsa.pub key in ~/.shh
$ ssh-keygen

CMD  arg1        arg2                       arg3                                  notes
---- ----------- -------------------------- ------------------------------------- -----------------------------------------------------------------------------------------------------------------------------------
gitk                                                                              a log GUI

git
     add         <FILENAME> ..................................................... stage <FILENAME>
     branch                                                                       list all local branches
                 -a ............................................................. list all local and remote branches
                                            --contains=<SHA>                      list all local and remote branches that has <SHA>
                 <BRANCH_NAME> .................................................. will create the local branch <BRANCH_NAME>
                 -d <BRANCH_TO_DELETE>                                            delete local branch that doesn't have commits waiting
                 -D <BRANCH_TO_DELETE> .......................................... delete local branch even if there are commits that aren't pushed
     checkout    -- <FILENAME>                                                    undo uncommited local changes to <FILENAME>
                 <BRANCH_NAME> .................................................. will switch over to the given <BRANCH_NAME>
                 -b <NEW_BRANCH_NAME>                                             "create a new local branch (same as ""git branch <NEW_BRANCH_NAME>"")"
     cherry-pick <SHA> .......................................................... will commit all same things that happened in <SHA> even if from a different branch.
     clone       git@git.vcd.hp.com:testing                                       example use of clone
     commit ..................................................................... commit all staged files. Will be prompted for a commit message
                 -m <COMMIT_MSG>                                                  commit all staget flles with the commit message of <COMMIT_MSG>
     config      -l OR --list ................................................... lists all the config settings
                 --get                      remote.origin.url                     How to determine the url that a local git repo was originally cloned from
                 --global                   user.name "Firstname Lastname" ...... allows you to set your user name
                                            user.email "your_email@provider.com"  allows you to set your email address
                                            color.ui true ....................... ?
                 core.filemode              false                                 will ignore the "old mode XXXX  new mode YYYY" diffs
                 credential.helper wincred ...................................... (Windows only) will store your gitHub HTTPS token along with your Windows user account (no need to type your password everytime)
     diff                                                                         Show the differences between HEAD and the local changes
                 HEAD^ .......................................................... Show the differences between HEAD and the previous commit
     gui                                                                          a GUI for stagging, committing and pushing local changes
     log         --stat ......................................................... Similar to --name-only and --name-status with a little bit more change info. However, it truncates file paths
                 -p                                                               Shows detail differences of each commit in history
                 --author                   <PART_OF_AUTHORS_NAME> .............. filter by a specific author
                 --name-only                                                      will just show the name of files that are changed and not the details
                 --name-status .................................................. Similar to --name-only with one character status as well
                 --oneline                                                        Show small version of SHA and the first line of the log all in one line for each commit shown
                 --follow                   <FILE_NAME>                           git will try to follow name changes of <FILE_NAME> when getting the log
                 -- <FILE_PATH> ................................................. shows the changes of a file  even if the file was deleted!
                 --diff-filter=D            --summary                             List all commits with deleted files; " | grep delete" makes a nice list of deleted files"
                 <SHA/BRANCH>..<SHA/BRANCH> ..................................... log all commits after the first <SHA/BRANCH> up to the second, not including the first but including the second.
     pull                                                                         pull in changes from the remote
     push ....................................................................... push all local commits to the remote
                 <REMOTE>                   <BRANCH_NAME>                         used to push a local branch to the remote (e.g. git push origin products2014)
                 --all                      -u .................................. push all local branches to the remote location
     remote      update                     origin --prune                        updates the local list of remote branches
                 prune                      origin                                this got rid of the deleted branches that were showing after renaming 2013 to products2013
                 set-url                    origin <NEW_GIT_ORIGN> .............. reconfigure where git pulls from e.g. git remote set-url origin git@gitlab.vcs.rd.hpicorp.net:FWQE/iws_salqe.git
                 show                       origin                                shows what URL is being used for pushes & pulls + other info about all the branches both remote and local
     reset       HEAD                       <FILENAME> .......................... unstage <FILENAME>
                 --soft                     HEAD^                                 undo last local commit
                 --hard                     <SHA of servers HEAD> ............... undo all local changes e.g. "git reset --hard origin/master" will undo all local commits
     rev-list    --first-parent             <BRANCH_NAME>                         list all SHAs for <BRNACH_NAME>
     rev-parse   HEAD                                                             get the most recent commit SHA
     revert      <sha> .......................................................... undos
                 -m                         1 <SHA>                               revert a merge
     show        <SHA> .......................................................... show the details of the sha checked in
                 <SHA>:<FILE_FULL_PATH>                                           show the contents of <FILE_FULL_PATH> at <SHA>
     stash       save ........................................................... will save all local changes to the top of the stash stack
                 pop                                                              will pop off the most recent saved stash from the stack and apply it locally
     status ..................................................................... show the status of local changes


Useful histroy view:
"git whatchanged --format=format:"">> %cn |  %ci%n>> %s"""


This is how to store your current changes and work on a different branch:
git  stash      save
git  checkout   <branch>
### do something
git  checkout   <oldbranch>
git  stash      pop
