Command to create ssh keys. It will create an id_rsa and id_rsa.pub key in ~/.shh
$ ssh-keygen

CMD  arg1        arg2                       arg3                                  notes
---- ----------- -------------------------- ------------------------------------- -----------------------------------------------------------------------------------------------------------------------------------
gitk                                                                              a log GUI

git
     add         <FILENAME> ..................................................... stage <FILENAME>
                 -A                                                               stage all changed and added files (useful for quickly stashing your working environment)
                 -N                         <FILE/FOLDER_NAME>                    indicate that a file/folder should be added (useful when you want to see these files in the diff log, e.g. for patch creation, or when you plan to use "git commit -a")
     apply       <DIFF_FILE> .................................................... apply a patch (DIFF_FILE) to the local environment. Note only the current directory and its sub-directories will be changed (change to the root of repo to avoid this)
                 --stat                     <DIFF_FILE>                           show what files would be changed without actually changing them
     branch                                                                       list all local branches
                 -a ............................................................. list all local and remote branches
                                            --contains=<SHA>                      list all local and remote branches that has <SHA>
                 <BRANCH_NAME> .................................................. will create the local branch <BRANCH_NAME>
                 -d <BRANCH_TO_DELETE>                                            delete local branch that doesn't have commits waiting            (to delete remote branches use "push origin --delete <BRANCH>")
                 -D <BRANCH_TO_DELETE> .......................................... delete local branch even if there are commits that aren't pushed (to delete remote branches use "push origin --delete <BRANCH>")
                 -m <NEW_BRANCH_NAME>                                             rename the local branch ("git push origin --delete <OLD_BRANCH_NAME>" to remove the old one from the remote and "git push --set-upstream origin <NEW_BRANCH_NAME>" to pull from the new remote branch)
     checkout    -- <FILENAME> .................................................. undo uncommited local changes to <FILENAME>
                 <SHA> <FILENAME>                                                 checkout a file from a different SHA
                 <BRANCH_NAME> .................................................. will switch over to the given <BRANCH_NAME>
                 -b <NEW_BRANCH_NAME>                                             "create a new local branch (same as ""git branch <NEW_BRANCH_NAME>"")"
     cherry-pick <SHA> .......................................................... will commit all same things that happened in <SHA> even if from a different branch.
     clean       -fd                                                              *!!! CAUTION !!!* removes all local untracked files (use -nfd instead to test it out before actually doing it). ref: https://stackoverflow.com/questions/1090309/git-undo-all-working-dir-changes-including-new-files
     clone       git@git.vcd.hp.com:testing                                       example use of clone
     commit ..................................................................... commit all staged files. Will be prompted for a commit message
                 --amend                                                          by itself it lets you change the last local commit message (if you "git add" something before calling this it will let you add that to the last commit too)
                 --allow-empty .................................................. a way to do a no-op commit
                 -m <COMMIT_MSG>                                                  commit all staged flles with the commit message of <COMMIT_MSG>
     config      -l OR --list ................................................... lists all the config settings
                 --unset                    <VAR_NAME>                            remove <VAR_NAME> config setting
                 --get                      remote.origin.url                     How to determine the url that a local git repo was originally cloned from
                 --global                   user.name "Firstname Lastname" ...... allows you to set your user name
                                            user.email "your_email@provider.com"  allows you to set your email address
                                            color.ui true ....................... ?
                 core.filemode              false                                 will ignore the "old mode XXXX  new mode YYYY" diffs
                 core.autocrlf              <OPTION>                              <OPTION> can be true (win), false (as-is) or input (unix)
                 credential.helper wincred ...................................... (Windows only) will store your gitHub HTTPS token along with your Windows user account (no need to type your password everytime)
     diff                                                                         Show the differences between HEAD and the local changes
                 HEAD^ .......................................................... Show the differences between HEAD and the previous commit
     gui                                                                          a GUI for stagging, committing and pushing local changes
     log         --stat ......................................................... Similar to --name-only and --name-status with a little bit more change info. However, it truncates file paths
                 -p                                                               Shows detail differences of each commit in history
                 --author                   <PART_OF_AUTHORS_NAME> .............. filter by a specific author
                 --graph                                                          show the branch trails e.g.1. git log --graph --all --oneline   e.g.2. git log --graph --oneline master 98a4457c37a30bfee5755441efd54e8d9b341d47
                 --name-only                                                      will just show the name of files that are changed and not the details
                 --name-status .................................................. Similar to --name-only with one character status as well
                 --oneline                                                        Show small version of SHA and the first line of the log all in one line for each commit shown
                 --follow                   <FILE_NAME>                           git will try to follow name changes of <FILE_NAME> when getting the log
                 -- <FILE_PATH> ................................................. shows the changes of a file  even if the file was deleted!
                 --diff-filter=D            --summary                             List all commits with deleted files; " | grep delete" makes a nice list of deleted files"
                 <SHA/BRANCH>..<SHA/BRANCH> ..................................... log all commits after the first <SHA/BRANCH> up to the second, not including the first but including the second.
                 --pretty="<FORMAT>"                                              show the log in a specific <FORMAT>. see https://git-scm.com/docs/pretty-formats   e.g. git log --pretty="%C(Yellow)%h %C(reset)%ad %<(12,trunc)%C(Cyan)%an %C(reset)%s %C(Yellow)%d" --date=short
     merge       --abort                                                          To cancel resolving any current merge conflicts
     pull ....................................................................... pull in changes from the remote
                 origin                     <BRANCH_NAME>                         pull in changes from another branch
     push ....................................................................... push all local commits to the remote
                 <REMOTE>                   <BRANCH_NAME>                         used to push a local branch to the remote (e.g. git push origin products2014)
                 --all                      -u .................................. push all local branches to the remote location
                 origin                     --delete <BRANCH_NAME>                deletes a remote branch
     rebase      <PARENT_BRANCH>                                                  sync up the current branch as if it just broke apart from <PARENT_BRANCH>'s tip commit
     remote      update                     origin --prune ...................... updates the local list of remote branches
                 prune                      origin                                removes links to branches that have been deleted on the remote
                 set-url                    origin <NEW_GIT_ORIGN> .............. reconfigure where git pulls from e.g. git remote set-url origin git@gitlab.vcs.rd.hpicorp.net:FWQE/iws_salqe.git
                 show                       origin                                shows what URL is being used for pushes & pulls + other info about all the branches both remote and local
                 -v ............................................................. shows the fetch and push locations
     reset                                                                        un-stage all staged files
                 <FILENAME> ..................................................... un-stage <FILENAME>
                 --soft                     HEAD^                                 undo last local commit. However, it will keep the changes in a staged ready to commit state
                 --hard                     <SHA of servers HEAD> ............... undo all local not staged changes (will not delete new files) e.g. "git reset --hard origin/master"
     rev-list    --first-parent             <BRANCH_NAME>                         list all SHAs for <BRNACH_NAME>
     rev-parse   HEAD                                                             get the most recent commit SHA
     revert      <sha> .......................................................... undos
                 -m                         1 <SHA>                               revert a merge
     show        <SHA> .......................................................... show the details of the sha checked in
                 <SHA>:<FILE_FULL_PATH>                                           show the contents of <FILE_FULL_PATH> at <SHA>
     stash       save ........................................................... will save all local changes to the top of the stash stack
                 pop                                                              will pop off the most recent saved stash from the stack and apply it locally
                 list                                                             show summary of the stash stack
     status ..................................................................... show the status of local changes


clean house:
git reset --hard origin/master
git clean -fd                    # *!!! CAUTION !!!*

Useful histroy view:
"git whatchanged --format=format:"">> %cn |  %ci%n>> %s"""


This is how to store your current changes and work on a different branch:
git  stash      save
git  checkout   <branch>
### do something
git  checkout   <oldbranch>
git  stash      pop


webui:
# ------------------------------------------------------------------------------------------------------
Link:    https://github.com/alberthier/git-webui
Install: curl https://raw.githubusercontent.com/alberthier/git-webui/master/install/installer.sh | bash
Start:   git webui
