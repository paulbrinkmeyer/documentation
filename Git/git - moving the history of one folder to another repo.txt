source:
http://gbayer.com/development/moving-files-from-one-git-repository-to-another-preserving-history/

Goal:
- Move directory 1 from Git repository A to Git repository B

Constraints:
- Git repository A contains other directories that we don’t want to move.
- We’d like to perserve the Git commit history for the directory we are moving.


Get files ready for the move:

Make a copy of repository A so you can mess with it without worrying about mistakes too much.  
It’s also a good idea to delete the link to the original repository to avoid accidentally making any remote changes (line 3).
Line 4 is the critical step here.  It goes through your history and files, removing anything that is not in directory 1.
The result is the contents of directory 1 spewed out into to the base of repository A.
You probably want to import these files into repository B within a directory, so move them into one now (lines 5/6).
Commit your changes and we’re ready to merge these files into the new repository.

1. git clone <git repository A url>
2. cd <git repository A directory>
3. git remote rm origin
4. git filter-branch --subdirectory-filter <directory 1> -- --all    # you don't need to do this step if you want to move the entire repo
5. mkdir <directory 1>                                               # <directory 1> needs to be the full path you want it to be in repository B
6. mv * <directory 1>
7. git add .
8. git commit


Merge files into new repository:

Make a copy of repository B if you don’t have one already.
On line 3, you’ll create a remote connection to repository A as a branch in repository B.
Then simply pull from this branch (containing only the directory you want to move) into repository B.
The pull copies both files and history.  Note: You can use a merge instead of a pull, but pull worked better for me.
Finally, you probably want to clean up a bit by removing the remote connection to repository A. Commit and you’re all set.

1. git clone <git repository B url>
2. cd <git repository B directory>
3. git remote add repo-A-branch <git repository A directory>    # repo-A-branch can be any name you choose it just needs to be something unique
4. git pull repo-A-branch master --allow-unrelated-histories
5. git remote rm repo-A-branch